pipeline {
    agent any
    tools {
        maven 'maven-jenkins-installation-3.9.8'//local
        nodejs "nodejs-jenkins-installation-22.7.0"
    }

    stages {

        stage('Git Checkout') {
            steps {
                checkout scmGit(
                        branches: [[name: '*/master']],
                        extensions: [],
                        userRemoteConfigs: [[url: "https://github.com/ValeriaCalzada/demoRest.git"]]
                        )
                    echo 'Git Checkout Completed'
            }
        }

        stage('Extract scripts') {
            steps {
                script {
                    env.listJobs = params.JOB_LIST.split(',')
                    sh 'scripts/extract-scripts.sh'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQServer') {
                    sh '''
                        mvn clean verify sonar:sonar -Dsonar.projectKey=DemoProjectSonarGithub -Dsonar.projectName='DemoProjectSonarGithub' -Dsonar.host.url=http://sonar:9000 -Dsonar.sources=.
                    '''
                    echo 'SonarQube Analysis Completed'
                }
            }
        }

        stage('Get token') {
            steps {
                withCredentials([string(credentialsId: 'client-secret', variable: 'CLIENT_SECRET')]){
                    script{
                        try{
                            env.authResponse=sh([script: '''
                                        bodyAuth="grant_type=client_credentials"
                                        responseAuth=$(curl -H "Content-Type: application/x-www-form-urlencoded" -H "Accept-Charset: UTF-8" \
                                                -X POST \
                                                -u "${CLIENT_ID}:${CLIENT_SECRET}" \
                                                -d "$bodyAuth" \
                                                --insecure \
                                                "$TOKEN_URL")
                                        echo "${responseAuth}" > response.json
                                        jq 'has("access_token")' response.json 
                                        ''', returnStdout: true]).trim()
                            if(authResponse == "true")
                                env.access_token = sh([script: ''' 
                                                    jq -r ".access_token" response.json ''', returnStdout: true]).trim()

                            else
                                throw new Exception()
                        }catch(err){
                            currentBuild.result = 'FAILURE'
                            def statusMessage = sh(script: 'cat response.json', returnStdout: true).trim()
                            error "Retrieving token for ${app_name} failed: ${statusMessage}"
                        }
                        
                    }
                }
            }
        }

        stage('Check if Application is elegible for promotion') {
            steps {
                script{
                    try{
                        env.listApplication=sh([script: '''
                                    listResponse=$(curl -H 'dmip-tenant-id: 1' -H "dmip-application-name: ${CLIENT_ID}" \
                                            -X GET \
                                            -H "Authorization: Bearer $access_token" \
                                            --insecure \
                                            "https://$INSTANCE_DMPS_URL:31443/dmip-gw/dmip/api/application/promotion-eligible?offset=1&limit=15")
                                            echo "${listResponse}" |  jq -r ".data" 
                                            ''', returnStdout: true]).trim()
                        if(!env.listApplication.toLowerCase().contains(env.app_name.toLowerCase())){
                            currentBuild.result = 'FAILURE'
                            error("${app_name} was not found as an eligible promotion application")
                        }
                    }catch(err){
                        currentBuild.result = 'FAILURE'
                        error "Application ${app_name} was not found on the list of elegible applications. List of elegible applications: ${listApplication}"
                    } 
                }
            }
        }


        stage('Export Application') {
            steps {
                script{
                    try{
                        env.exportResponse=sh([script: '''
                                    curl -H 'dmip-tenant-id: 1' -H "dmip-application-name: ${CLIENT_ID}" \
                                            -X POST \
                                            -H "Authorization: Bearer $access_token" -H "Content-Type: application/vnd.fico.dmip.v6.0+json"\
                                            --insecure \
                                            "https://$INSTANCE_DMPS_URL:31443/dmip-gw/dmip/api/application/export?application-name=$app_name&destination=trusted-resource&adapter-name=$DMPS_TRUSTED_RESOURCE" \
                                            ''', returnStdout: true]).trim()
                        env.appZipUuidTxt=sh([script: '''
                                    echo "${exportResponse}" |  jq -r ".appZipUuidTxt" 
                                    ''', returnStdout: true]).trim()
                    }catch(err){
                        currentBuild.result = 'FAILURE'
                        def statusMessage = sh(script: 'echo "${exportResponse}" | tr "\n" " " | jq -r ".errorMessage"', returnStdout: true).trim()
                        error "Exporting ${app_name} failed:  ${statusMessage}"
                    }
                }
            }
        }
        

        stage('Check status on Export process') {
            steps {
                script{
                    try{
                        timeout(time: 2, unit: 'MINUTES'){
                            waitUntil{
                                env.statusCheck= sh([script: '''
                                        curl -H "dmip-tenant-id: 1" -H "dmip-application-name: ${CLIENT_ID}" \
                                                    -X GET \
                                                    -H "Authorization: Bearer $access_token" \
                                                    --insecure \
                                                    "https://$INSTANCE_DMPS_URL:31443/dmip-gw/dmip/api/application/export/${appZipUuidTxt}/status"
                                                    ''', returnStdout: true]).trim()
                                def appZipStatus = sh(script: 'echo "${statusCheck}" | jq -r ".appZipStatus"', returnStdout: true).trim()
                                def statusCode=sh([script: '''
                                        echo "${statusCheck}" | tr '\n' ' ' | jq -r ".statusCode" 
                                        ''', returnStdout: true]).trim()
                                if (appZipStatus == "UPLOADED" || statusCode == "200"){
                                    env.zipFileName=sh(script: '''
                                        statusMessage=$(echo "${statusCheck}" | jq -r ".statusMessage") 
                                        echo "${statusMessage}" | grep -oP "'[^']+\\.zip'" | sed "s/'//g" 
                                        ''', returnStdout: true).trim()
                                    return true
                                }else {
                                    if(statusCode == "400" || statusCode == "500"){
                                        throw new Exception()
                                    }
                                    sleep(15)
                                    return false
                                }
                            }
                        } 
                    }catch(err){
                        currentBuild.result = 'FAILURE'
                        def statusMessage = sh(script: 'echo "${statusCheck}" | tr "\n" " " | jq -r ".statusMessage"', returnStdout: true).trim()
                        error "Exporting ${app_name} failed:  ${statusMessage}"
                    }
                                       
                }
            }
        }


        stage('Stop running jobs'){
            steps{
                sshagent(credentials : ['ssh-credentials']) {
                    script {
                        def list = params.JOB_LIST.split(',')
                        def parallelTasks = [:]
                        sh "ssh -o StrictHostKeyChecking=accept-new ec2-user@${INSTANCE_DMPS_URL} uptime"
                        list.each { job ->
                        parallelTasks[job] = {
                            sh """
                                ssh ec2-user@${INSTANCE_DMPS_URL} java -jar /home/ec2-user/popc/popc.jar job stop -j "${job}" -S HGfHTPag6ZfMpDHyEyGiJh9WIdtwaqw2 --tenantId=2 -v -cf /home/ec2-user/popc/config.yaml || true
                            """ 
                            waitUntil{
                                popcCheck = sh(script: """ssh ec2-user@${INSTANCE_DMPS_URL} java -jar /home/ec2-user/popc/popc.jar job status -j ${job} -S HGfHTPag6ZfMpDHyEyGiJh9WIdtwaqw2 --tenantId=2 -cf /home/ec2-user/popc/config.yaml""", returnStdout: true).trim()
                                job_status=sh(script:""" echo "${popcCheck}" | grep "|" | tail -n 1 | tr -d "| " """, returnStdout: true).trim()
                                if(job_status == "CONFIGURED" || job_status == "FINISHED")
                                    return true
                                else 
                                    sleep(10)
                                    return false
                            }
                                               
                        }}
                        parallel parallelTasks
                    }
                }
            }
        }

        stage('Import Application') {
            steps {
                script{
                    try{
                        withCredentials([usernamePassword(credentialsId: 'github-dmps-credentials', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME'), string(credentialsId:'github-dmps-token', variable:'GIT_TOKEN')]){
                        env.importResponse=sh([script: '''
                                    curl -H 'dmip-tenant-id: 2' -H "dmip-application-name: ${CLIENT_ID}" \
                                                -X POST \
                                                -H "Authorization: Bearer $access_token" -H "Content-Type: application/vnd.fico.dmip.v6.0+json"\
                                                -H "git-username: $GIT_USERNAME" -H "git-password: $GIT_TOKEN" \
                                                --insecure \
                                                "https://$INSTANCE_DMPS_URL:31443/dmip-gw/dmip/api/application/import?application-package-name=${zipFileName}&application-name=${app_name}&source=trusted-resource&adapter-name=$DMPS_TRUSTED_RESOURCE&overwrite-application=$OVERWRITE_APPLICATION&retain-labels=true&auto-job-start=$job_autostart" 
                                                ''', returnStdout: true]).trim()
                        env.appZipUuidTxtImport=sh([script: '''
                                        echo "${importResponse}" |  jq -r ".appZipUuidTxt" 
                                        ''', returnStdout: true]).trim()
                        }
                    }catch(err){
                        currentBuild.result = 'FAILURE'
                        def statusMessage = sh(script: 'echo "${importResponse}" | tr "\n" " " | jq -r ".errorMessage"', returnStdout: true).trim()
                        error "Importing ${app_name} failed:  ${statusMessage}"
                    }   
                }
            }
        }

        stage('Check status on Import process') {
            steps {
                script{
                    try{
                        timeout(time: 2, unit: 'MINUTES'){
                            waitUntil{
                                env.statusCheck= sh([script: '''
                                        curl -H 'dmip-tenant-id: 1' -H "dmip-application-name: ${CLIENT_ID}" \
                                                    -X GET \
                                                    -H "Authorization: Bearer $access_token" \
                                                    --insecure \
                                                    "https://$INSTANCE_DMPS_URL:31443/dmip-gw/dmip/api/application/import/${appZipUuidTxtImport}/status"
                                                    ''', returnStdout: true]).trim()
                                def statusCode=sh([script: '''
                                        echo "${statusCheck}" | tr '\n' ' ' | jq -r ".statusCode" 
                                        ''', returnStdout: true]).trim()
                                if (statusCode == "200"){  
                                    return true
                                }else {
                                    if(statusCode == "400" || statusCode == "500"){
                                        throw new Exception()
                                    }
                                    sleep(15)
                                    return false
                                }
                            }
                        }
                    }catch(err){
                        currentBuild.result = 'FAILURE'
                        def statusMessage = sh(script: '''
                                echo "${statusCheck}" | tr '\n' ' ' | jq ".statusMessage"
                                ''', returnStdout: true).trim()
                        error "Importing ${app_name} failed:  ${statusMessage}"
                        return false
                    }
                    
                }
            }
        }
    }
}