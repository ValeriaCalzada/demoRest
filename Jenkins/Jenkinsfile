pipeline {
    agent any
    tools {
        maven 'maven-jenkins-installation-3.9.8'//local
        nodejs "nodejs-jenkins-installation-22.7.0"
    }

    stages {

        stage('Git Checkout') {
            steps {
                checkout scmGit(
                        branches: [[name: '*/master']],
                        extensions: [],
                        userRemoteConfigs: [[url: "https://github.com/ValeriaCalzada/demoRest.git"]]
                        )
                    echo 'Git Checkout Completed'
            }
        }

        stage('Token retrieval') {
            steps {
                withEnv(["CLIENT_ID=${params.CLIENT_ID}"]) {
                    withCredentials([string(credentialsId: 'client-secret', variable: 'CLIENT_SECRET')]){
                        script{
                            env.responseAuth=sh([script: '''
                                            bodyAuth="grant_type=client_credentials"
                                            curl -H "Content-Type: application/x-www-form-urlencoded" -H "Accept-Charset: UTF-8" \
                                                    -X POST \
                                                    -u "${CLIENT_ID}:${CLIENT_SECRET}" \
                                                    -d "$bodyAuth" \
                                                    --insecure \
                                                    "$TOKEN_URL"
                                                    ''', returnStdout: true]).trim()
                            env.access_token=sh([script: '''
                                            echo "${responseAuth}" > response.json
                                            jq -r ".access_token" response.json
                                            ''', returnStdout: true]).trim()
                        }
                    }
                }
            }
        }

        stage('List All Eligible Applications') {
            steps {
                withCredentials([string(credentialsId: 'postman-token', variable: 'POSTMAN_API_KEY')]){
                    script{
                            env.listApplication=sh([script: '''
                                            curl -H 'dmip-tenant-id: 1' -H 'dmip-application-name: TestApplication' \
                                                    -X GET \
                                                    -H "Authorization: Bearer $access_token" \
                                                    --insecure \
                                                    "$INSTANCE_DMPS_URL:31443/dmip-gw/dmip/api/application/promotion-eligible?offset=1&limit=15"
                                                    ''', returnStdout: true]).trim()
                    }
                    echo "${listApplication}"
                }
            }
        }

        stage('Running collection') {
            steps {
                sh 'postman collection run "24464678-797b1e32-ba59-4604-9873-1ea97a2bc9c4"'
            }
        }

        stage('Call External Endpoint') {
            steps {
                script {
                    def endpointUrl = "https://pokeapi.co/api/v2/pokemon/${params.POKEMON_NAME}"
                    def response = httpRequest url: endpointUrl, validResponseCodes: '200:299'
                    def jsonResponse = readJSON text: response.content
                    echo "Response from API: ${jsonResponse}"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQServer') {
                    sh '''
                        mvn clean verify sonar:sonar -Dsonar.projectKey=DemoProjectSonarGithub -Dsonar.projectName='DemoProjectSonarGithub' -Dsonar.host.url=http://sonar:9000
                    '''
                    echo 'SonarQube Analysis Completed'
                }
            }
        }
    }
}
